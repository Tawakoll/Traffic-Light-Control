
TrafficLightsProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000095a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000095a  000009ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006a  0080006a  000009f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001723  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f0  00000000  00000000  0000232f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e6c  00000000  00000000  00002d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  00003b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000891  00000000  00000000  000040dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001098  00000000  00000000  0000496d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005a05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_1>
   8:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_2>
   c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_3>
  10:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_4>
  14:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__vector_9>
  28:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_10>
  2c:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  8a:	0c 94 ab 04 	jmp	0x956	; 0x956 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timerProcessing>:
}
void timerProcessing(void)
{

	
	g_interruptCounter++;
  92:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  9c:	08 95       	ret

0000009e <AllLedsOFF>:
	pedestrianMode();
	
}

void AllLedsOFF(void)
{	LED_off(PEDESTRIAN_PORT,PEDESTRIAN_GREEN_LED);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	81 e4       	ldi	r24, 0x41	; 65
  a2:	0e 94 49 01 	call	0x292	; 0x292 <LED_off>
	LED_off(PEDESTRIAN_PORT,PEDESTRIAN_RED_LED);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	81 e4       	ldi	r24, 0x41	; 65
  aa:	0e 94 49 01 	call	0x292	; 0x292 <LED_off>
	LED_off(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW_LED);
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	81 e4       	ldi	r24, 0x41	; 65
  b2:	0e 94 49 01 	call	0x292	; 0x292 <LED_off>
	
	LED_off(CARS_PORT,CARS_GREEN_LED);
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	82 e4       	ldi	r24, 0x42	; 66
  ba:	0e 94 49 01 	call	0x292	; 0x292 <LED_off>
	LED_off(CARS_PORT,CARS_RED_LED);
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	82 e4       	ldi	r24, 0x42	; 66
  c2:	0e 94 49 01 	call	0x292	; 0x292 <LED_off>
	LED_off(CARS_PORT,CARS_YELOW_LED);
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	82 e4       	ldi	r24, 0x42	; 66
  ca:	0e 94 49 01 	call	0x292	; 0x292 <LED_off>
  ce:	08 95       	ret

000000d0 <APP_init>:
}

void APP_init(void)//Initialize all application functions that are needed to be initialized one time only
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	00 d0       	rcall	.+0      	; 0xd6 <APP_init+0x6>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	
	//Enable global interrupt bit in SREG
	sei();
  da:	78 94       	sei
	//enable global interrupts or by SREG|=(1<<7);
	//Initialize the external interrupt , give values to the configuration struct
	ExInterrupt_ConfigStruct_t externalInterruptConfig = {INT_0,RISING};
  dc:	19 82       	std	Y+1, r1	; 0x01
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	8a 83       	std	Y+2, r24	; 0x02
	
	//pass to the init function the configuration struct we just initialized
	ExternalInterrupt_init(&externalInterruptConfig);
  e2:	ce 01       	movw	r24, r28
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <ExternalInterrupt_init>
	
	//set call back function by passing the processing function name which is the address of the function
	ExternalInterrupt_setCallBack(APP_InterruptProcessing);
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 10 02 	call	0x420	; 0x420 <ExternalInterrupt_setCallBack>
	
	//Initialize all application LED'S and initialize int0 PD2 pin to input pin
	GPIO_init(PIN_2,PORT_D,INPUT);
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	64 e4       	ldi	r22, 0x44	; 68
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	0e 94 15 02 	call	0x42a	; 0x42a <GPIO_init>
	
	LED_init(PEDESTRIAN_PORT,PEDESTRIAN_GREEN_LED);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 3b 01 	call	0x276	; 0x276 <LED_init>
	LED_init(PEDESTRIAN_PORT,PEDESTRIAN_RED_LED);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	0e 94 3b 01 	call	0x276	; 0x276 <LED_init>
	LED_init(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW_LED);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 3b 01 	call	0x276	; 0x276 <LED_init>
	
	LED_init(CARS_PORT,CARS_GREEN_LED);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	82 e4       	ldi	r24, 0x42	; 66
 118:	0e 94 3b 01 	call	0x276	; 0x276 <LED_init>
	LED_init(CARS_PORT,CARS_RED_LED);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	82 e4       	ldi	r24, 0x42	; 66
 120:	0e 94 3b 01 	call	0x276	; 0x276 <LED_init>
	LED_init(CARS_PORT,CARS_YELOW_LED);
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	82 e4       	ldi	r24, 0x42	; 66
 128:	0e 94 3b 01 	call	0x276	; 0x276 <LED_init>
	

}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <delayFiveSeconds>:


}

void delayFiveSeconds(void)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	28 97       	sbiw	r28, 0x08	; 8
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
	// I implement this 5 second delay using timer1 since it's 16 bit and it's
	//better to have lowest amount of interrupts , for example if we use max prescaler = 1024
	// and we need to count to 4883 which is required for 5 sec interrupt 8 bit timers 0,2
	// will have a big number of interrupts to make it to 5 seconds which is not the best
	
	sei();
 14a:	78 94       	sei
	
	// timer prescaler will be 1024 so we reach 5 seconds or 5000 ms in 4883 counts in OCRn
	//(output compare register , n: for any timer)
	st_timerConfig_t timerConfiguration ={0,4883,N_1024,timer1,CTC,ENABLE};
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	e1 e6       	ldi	r30, 0x61	; 97
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	de 01       	movw	r26, r28
 154:	11 96       	adiw	r26, 0x01	; 1
 156:	01 90       	ld	r0, Z+
 158:	0d 92       	st	X+, r0
 15a:	8a 95       	dec	r24
 15c:	e1 f7       	brne	.-8      	; 0x156 <delayFiveSeconds+0x20>
	TIMER_setCallback(timerProcessing);
 15e:	89 e4       	ldi	r24, 0x49	; 73
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 19 04 	call	0x832	; 0x832 <TIMER_setCallback>
	TIMER_init(&timerConfiguration); // send the init function the config struct we defined above
 166:	ce 01       	movw	r24, r28
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	0e 94 1e 04 	call	0x83c	; 0x83c <TIMER_init>
	//timer TCNTn Register start counting right after we select the prescaler bits
	//which happen last thing in the TIMER_init function
	while(g_interruptCounter != 1)
 16e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	e1 f7       	brne	.-8      	; 0x16e <delayFiveSeconds+0x38>
	{
		// waiting for interrupt to occur hence waiting the desired 5 seconds

	}
	g_interruptCounter=0;
 176:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>

	TIMER_reset(timer1);
 17a:	0e 94 91 04 	call	0x922	; 0x922 <TIMER_reset>
	
}
 17e:	28 96       	adiw	r28, 0x08	; 8
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <pedestrianMode>:

void pedestrianMode(void)
{

	
	AllLedsOFF();
 190:	0e 94 4f 00 	call	0x9e	; 0x9e <AllLedsOFF>
	if(carLedState==RED)
 194:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 198:	81 11       	cpse	r24, r1
 19a:	0b c0       	rjmp	.+22     	; 0x1b2 <pedestrianMode+0x22>
	{
		LED_on(PEDESTRIAN_PORT,PEDESTRIAN_GREEN_LED);
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
		LED_on(CARS_PORT,CARS_RED_LED);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	82 e4       	ldi	r24, 0x42	; 66
 1a8:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
		delayFiveSeconds();
 1ac:	0e 94 9b 00 	call	0x136	; 0x136 <delayFiveSeconds>
 1b0:	1d c0       	rjmp	.+58     	; 0x1ec <pedestrianMode+0x5c>
	}
	else if(carLedState==GREEN || carLedState==YELLOW)
 1b2:	81 50       	subi	r24, 0x01	; 1
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	d0 f4       	brcc	.+52     	; 0x1ec <pedestrianMode+0x5c>
	{
		LED_on(PEDESTRIAN_PORT,PEDESTRIAN_RED_LED);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
		LED_on(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW_LED);
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	81 e4       	ldi	r24, 0x41	; 65
 1c4:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>

		LED_on(CARS_PORT,CARS_YELOW_LED);
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	82 e4       	ldi	r24, 0x42	; 66
 1cc:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
		delayFiveSeconds();
 1d0:	0e 94 9b 00 	call	0x136	; 0x136 <delayFiveSeconds>
		AllLedsOFF();
 1d4:	0e 94 4f 00 	call	0x9e	; 0x9e <AllLedsOFF>

		LED_on(PEDESTRIAN_PORT,PEDESTRIAN_GREEN_LED);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	81 e4       	ldi	r24, 0x41	; 65
 1dc:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
		LED_on(CARS_PORT,CARS_RED_LED);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
		delayFiveSeconds();
 1e8:	0e 94 9b 00 	call	0x136	; 0x136 <delayFiveSeconds>
	}
	AllLedsOFF();
 1ec:	0e 94 4f 00 	call	0x9e	; 0x9e <AllLedsOFF>
	LED_on(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW_LED);
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	81 e4       	ldi	r24, 0x41	; 65
 1f4:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
LED_on(PEDESTRIAN_PORT,PEDESTRIAN_GREEN_LED);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
	LED_on(CARS_PORT,CARS_YELOW_LED);
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	82 e4       	ldi	r24, 0x42	; 66
 204:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
	delayFiveSeconds();
 208:	0e 94 9b 00 	call	0x136	; 0x136 <delayFiveSeconds>
	
	reti();
 20c:	18 95       	reti
 20e:	08 95       	ret

00000210 <APP_InterruptProcessing>:

en_mode_t trafficMode=CARS;// Initialize a traffic mode into cars first
en_carsLightState_t carLedState= GREEN;
void APP_InterruptProcessing(void){

	pedestrianMode();
 210:	0e 94 c8 00 	call	0x190	; 0x190 <pedestrianMode>
 214:	08 95       	ret

00000216 <carsMode>:
	//cli();

}
void carsMode(void)
{
	AllLedsOFF();
 216:	0e 94 4f 00 	call	0x9e	; 0x9e <AllLedsOFF>
	
	LED_on(CARS_PORT,CARS_GREEN_LED);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
	LED_on(PEDESTRIAN_PORT,PEDESTRIAN_RED_LED);
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	81 e4       	ldi	r24, 0x41	; 65
 226:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
	carLedState= GREEN;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	delayFiveSeconds();
 230:	0e 94 9b 00 	call	0x136	; 0x136 <delayFiveSeconds>

	
	LED_on(CARS_PORT,CARS_YELOW_LED);
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	82 e4       	ldi	r24, 0x42	; 66
 238:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
	LED_on(PEDESTRIAN_PORT,PEDESTRIAN_YELLOW_LED);
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	81 e4       	ldi	r24, 0x41	; 65
 240:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
	carLedState=YELLOW;
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	delayFiveSeconds();
 24a:	0e 94 9b 00 	call	0x136	; 0x136 <delayFiveSeconds>

	
	AllLedsOFF();
 24e:	0e 94 4f 00 	call	0x9e	; 0x9e <AllLedsOFF>
	
	
	carLedState=RED;
 252:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_on(CARS_PORT,CARS_RED_LED);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	82 e4       	ldi	r24, 0x42	; 66
 25a:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
	LED_on(PEDESTRIAN_PORT,PEDESTRIAN_GREEN_LED);
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	0e 94 42 01 	call	0x284	; 0x284 <LED_on>
	delayFiveSeconds();
 266:	0e 94 9b 00 	call	0x136	; 0x136 <delayFiveSeconds>

	AllLedsOFF();
 26a:	0e 94 4f 00 	call	0x9e	; 0x9e <AllLedsOFF>
 26e:	08 95       	ret

00000270 <APP_flow>:
void APP_flow(void)
{
	APPLICATION_LOOP
	{
		
		carsMode();
 270:	0e 94 0b 01 	call	0x216	; 0x216 <carsMode>
 274:	fd cf       	rjmp	.-6      	; 0x270 <APP_flow>

00000276 <LED_init>:
 */ 
#include "led.h"

/*******************    functions implementations  *****************/
void LED_init(uint8_t ledPort, uint8_t ledPin)
{
 276:	98 2f       	mov	r25, r24
 278:	86 2f       	mov	r24, r22
	GPIO_init(ledPin,ledPort,OUTPUT);
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	69 2f       	mov	r22, r25
 27e:	0e 94 15 02 	call	0x42a	; 0x42a <GPIO_init>
 282:	08 95       	ret

00000284 <LED_on>:
}

void LED_on(uint8_t ledPort, uint8_t ledPin)
{
 284:	98 2f       	mov	r25, r24
 286:	86 2f       	mov	r24, r22
	GPIO_write(ledPin,ledPort,HIGH);
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	69 2f       	mov	r22, r25
 28c:	0e 94 9c 02 	call	0x538	; 0x538 <GPIO_write>
 290:	08 95       	ret

00000292 <LED_off>:
}
void LED_off(uint8_t ledPort, uint8_t ledPin)
{
 292:	98 2f       	mov	r25, r24
 294:	86 2f       	mov	r24, r22
	GPIO_write(ledPin,ledPort,LOW);
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	69 2f       	mov	r22, r25
 29a:	0e 94 9c 02 	call	0x538	; 0x538 <GPIO_write>
 29e:	08 95       	ret

000002a0 <main>:

int main(void)
{
    
	/* Replace with your application code */
	APP_init();
 2a0:	0e 94 68 00 	call	0xd0	; 0xd0 <APP_init>

	//APP flow includes application loop

	APP_flow();
 2a4:	0e 94 38 01 	call	0x270	; 0x270 <APP_flow>
	
	
    return 0 ;
}
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	08 95       	ret

000002ae <__vector_1>:
/************************************************************************/
/*   Global pointer to function                                                                    */
/************************************************************************/
 volatile void (*CallBackPtr) (void) = NULL ;	//it should be volatile since it is adjusted by ISR which is activated by hardware so we disable optimization
ISR(INT0_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	if(CallBackPtr != NULL)
 2d0:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <CallBackPtr>
 2d4:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <CallBackPtr+0x1>
 2d8:	30 97       	sbiw	r30, 0x00	; 0
 2da:	09 f0       	breq	.+2      	; 0x2de <__vector_1+0x30>
	{
		CallBackPtr();
 2dc:	09 95       	icall
		
	}
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <__vector_2>:

ISR(INT1_vect)
{
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	if(CallBackPtr != NULL)
 322:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <CallBackPtr>
 326:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <CallBackPtr+0x1>
 32a:	30 97       	sbiw	r30, 0x00	; 0
 32c:	09 f0       	breq	.+2      	; 0x330 <__vector_2+0x30>
	{
		CallBackPtr();
 32e:	09 95       	icall
		
	}
}
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <__vector_3>:

ISR(INT2_vect)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	4f 93       	push	r20
 362:	5f 93       	push	r21
 364:	6f 93       	push	r22
 366:	7f 93       	push	r23
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
	if(CallBackPtr != NULL)
 374:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <CallBackPtr>
 378:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <CallBackPtr+0x1>
 37c:	30 97       	sbiw	r30, 0x00	; 0
 37e:	09 f0       	breq	.+2      	; 0x382 <__vector_3+0x30>
	{
		CallBackPtr();
 380:	09 95       	icall
		
	}
}
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <ExternalInterrupt_init>:

void ExternalInterrupt_init(ExInterrupt_ConfigStruct_t *configStruct)
{
 3a4:	fc 01       	movw	r30, r24
	switch(configStruct->extInt)
 3a6:	90 81       	ld	r25, Z
 3a8:	91 30       	cpi	r25, 0x01	; 1
 3aa:	d1 f0       	breq	.+52     	; 0x3e0 <ExternalInterrupt_init+0x3c>
 3ac:	18 f0       	brcs	.+6      	; 0x3b4 <ExternalInterrupt_init+0x10>
 3ae:	92 30       	cpi	r25, 0x02	; 2
 3b0:	69 f1       	breq	.+90     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3b2:	08 95       	ret
	{
		case INT_0 :
		if(configStruct->edge==RISING)
 3b4:	81 81       	ldd	r24, Z+1	; 0x01
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	21 f4       	brne	.+8      	; 0x3c2 <ExternalInterrupt_init+0x1e>
		{
			MCUCR |= (1<<ISC01) | (1<<ISC00) ;//Set bits isc01 & isc00 for to select rising edge
 3ba:	85 b7       	in	r24, 0x35	; 53
 3bc:	83 60       	ori	r24, 0x03	; 3
 3be:	85 bf       	out	0x35, r24	; 53
 3c0:	0b c0       	rjmp	.+22     	; 0x3d8 <ExternalInterrupt_init+0x34>
		}
		else if(configStruct->edge==FALLING)
 3c2:	81 11       	cpse	r24, r1
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <ExternalInterrupt_init+0x2a>
		{
			MCUCR |= (1<<ISC01); //Set bit isc01 for to select falling edge
 3c6:	85 b7       	in	r24, 0x35	; 53
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	85 bf       	out	0x35, r24	; 53
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <ExternalInterrupt_init+0x34>
		}
		
		
		else if(configStruct->edge==ANYCHANGE)
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	19 f4       	brne	.+6      	; 0x3d8 <ExternalInterrupt_init+0x34>
		{
			MCUCR |= (1<<ISC00); //Set bit isc00 for to select int0 on any logical change
 3d2:	85 b7       	in	r24, 0x35	; 53
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	85 bf       	out	0x35, r24	; 53
		else
		{
			//error handling
		}
		
		GICR |= (1<<INT0); //ENABLE external interrupt 0 in GICR register
 3d8:	8b b7       	in	r24, 0x3b	; 59
 3da:	80 64       	ori	r24, 0x40	; 64
 3dc:	8b bf       	out	0x3b, r24	; 59
		
		break ;
 3de:	08 95       	ret
		
		case INT_1 :
		
		if(configStruct->edge==RISING)
 3e0:	81 81       	ldd	r24, Z+1	; 0x01
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	21 f4       	brne	.+8      	; 0x3ee <ExternalInterrupt_init+0x4a>
		{
			MCUCR |= (1<<ISC11) | (1<<ISC10) ;//Set bits isc11 & isc10  to select RISING edge
 3e6:	85 b7       	in	r24, 0x35	; 53
 3e8:	8c 60       	ori	r24, 0x0C	; 12
 3ea:	85 bf       	out	0x35, r24	; 53
 3ec:	0b c0       	rjmp	.+22     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		}
		else if(configStruct->edge==FALLING)
 3ee:	81 11       	cpse	r24, r1
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <ExternalInterrupt_init+0x56>
		{
			MCUCR |= (1<<ISC11); //Set bit isc11  to select falling edge
 3f2:	85 b7       	in	r24, 0x35	; 53
 3f4:	88 60       	ori	r24, 0x08	; 8
 3f6:	85 bf       	out	0x35, r24	; 53
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		}
		
		
		else if(configStruct->edge==ANYCHANGE)
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	19 f4       	brne	.+6      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			MCUCR |= (1<<ISC10); //Set bit isc10  to select int0 on any logical change
 3fe:	85 b7       	in	r24, 0x35	; 53
 400:	84 60       	ori	r24, 0x04	; 4
 402:	85 bf       	out	0x35, r24	; 53
		else
		{
			//error handling
		}
		
		GICR |= (1<<INT1); //ENABLE external interrupt 1 in GICR register
 404:	8b b7       	in	r24, 0x3b	; 59
 406:	80 68       	ori	r24, 0x80	; 128
 408:	8b bf       	out	0x3b, r24	; 59

		
		break ;
 40a:	08 95       	ret
		
		case INT_2 :
		
		if(configStruct->edge==RISING)
 40c:	81 81       	ldd	r24, Z+1	; 0x01
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	19 f4       	brne	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			MCUCSR |= (1<<ISC2) ;//Set bit ISC2  to select RISING edge
 412:	84 b7       	in	r24, 0x34	; 52
 414:	80 64       	ori	r24, 0x40	; 64
 416:	84 bf       	out	0x34, r24	; 52
		else
		{
			//error handling
		}
		
		GICR |= (1<<INT2); //ENABLE external interrupt 0 in GICR register
 418:	8b b7       	in	r24, 0x3b	; 59
 41a:	80 62       	ori	r24, 0x20	; 32
 41c:	8b bf       	out	0x3b, r24	; 59
 41e:	08 95       	ret

00000420 <ExternalInterrupt_setCallBack>:
	
	
}
void ExternalInterrupt_setCallBack( void (*FuncPtr) (void))
{
	CallBackPtr=FuncPtr;
 420:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <CallBackPtr+0x1>
 424:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <CallBackPtr>
 428:	08 95       	ret

0000042a <GPIO_init>:

// function definitions

void GPIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction) // Initialize GPIO pin direction
{
	switch(portNumber)
 42a:	62 34       	cpi	r22, 0x42	; 66
 42c:	51 f1       	breq	.+84     	; 0x482 <GPIO_init+0x58>
 42e:	18 f4       	brcc	.+6      	; 0x436 <GPIO_init+0xc>
 430:	61 34       	cpi	r22, 0x41	; 65
 432:	41 f0       	breq	.+16     	; 0x444 <GPIO_init+0x1a>
 434:	08 95       	ret
 436:	63 34       	cpi	r22, 0x43	; 67
 438:	09 f4       	brne	.+2      	; 0x43c <GPIO_init+0x12>
 43a:	42 c0       	rjmp	.+132    	; 0x4c0 <GPIO_init+0x96>
 43c:	64 34       	cpi	r22, 0x44	; 68
 43e:	09 f4       	brne	.+2      	; 0x442 <GPIO_init+0x18>
 440:	5d c0       	rjmp	.+186    	; 0x4fc <GPIO_init+0xd2>
 442:	08 95       	ret
	{
		case PORT_A:
		if(direction == INPUT)
 444:	41 11       	cpse	r20, r1
 446:	0d c0       	rjmp	.+26     	; 0x462 <GPIO_init+0x38>
		{
			DDRA &= (1 << pinNumber); // input
 448:	4a b3       	in	r20, 0x1a	; 26
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	b9 01       	movw	r22, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <GPIO_init+0x2c>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	8a 95       	dec	r24
 458:	e2 f7       	brpl	.-8      	; 0x452 <GPIO_init+0x28>
 45a:	cb 01       	movw	r24, r22
 45c:	84 23       	and	r24, r20
 45e:	8a bb       	out	0x1a, r24	; 26
 460:	08 95       	ret
		}
		else if(direction == OUTPUT)
 462:	41 30       	cpi	r20, 0x01	; 1
 464:	09 f0       	breq	.+2      	; 0x468 <GPIO_init+0x3e>
 466:	67 c0       	rjmp	.+206    	; 0x536 <GPIO_init+0x10c>
		{
			DDRA |= (1 << pinNumber); // Output
 468:	4a b3       	in	r20, 0x1a	; 26
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	b9 01       	movw	r22, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <GPIO_init+0x4c>
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	8a 95       	dec	r24
 478:	e2 f7       	brpl	.-8      	; 0x472 <GPIO_init+0x48>
 47a:	cb 01       	movw	r24, r22
 47c:	84 2b       	or	r24, r20
 47e:	8a bb       	out	0x1a, r24	; 26
 480:	08 95       	ret
			//Error handling
		}
		break;
		
		case PORT_B:
		if(direction == INPUT)
 482:	41 11       	cpse	r20, r1
 484:	0d c0       	rjmp	.+26     	; 0x4a0 <GPIO_init+0x76>
		{
			DDRB &= (1 << pinNumber); // input
 486:	47 b3       	in	r20, 0x17	; 23
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <GPIO_init+0x6a>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	8a 95       	dec	r24
 496:	e2 f7       	brpl	.-8      	; 0x490 <GPIO_init+0x66>
 498:	cb 01       	movw	r24, r22
 49a:	84 23       	and	r24, r20
 49c:	87 bb       	out	0x17, r24	; 23
 49e:	08 95       	ret
		}
		else if(direction == OUTPUT)
 4a0:	41 30       	cpi	r20, 0x01	; 1
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <GPIO_init+0x7c>
 4a4:	48 c0       	rjmp	.+144    	; 0x536 <GPIO_init+0x10c>
		{
			DDRB |= (1 << pinNumber); // Output
 4a6:	47 b3       	in	r20, 0x17	; 23
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	b9 01       	movw	r22, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <GPIO_init+0x8a>
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	8a 95       	dec	r24
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <GPIO_init+0x86>
 4b8:	cb 01       	movw	r24, r22
 4ba:	84 2b       	or	r24, r20
 4bc:	87 bb       	out	0x17, r24	; 23
 4be:	08 95       	ret
		
		
		break;
		
		case PORT_C:
		if(direction == INPUT)
 4c0:	41 11       	cpse	r20, r1
 4c2:	0d c0       	rjmp	.+26     	; 0x4de <GPIO_init+0xb4>
		{
			DDRC &= (1 << pinNumber); // input
 4c4:	44 b3       	in	r20, 0x14	; 20
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	b9 01       	movw	r22, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <GPIO_init+0xa8>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <GPIO_init+0xa4>
 4d6:	cb 01       	movw	r24, r22
 4d8:	84 23       	and	r24, r20
 4da:	84 bb       	out	0x14, r24	; 20
 4dc:	08 95       	ret
		}
		else if(direction == OUTPUT)
 4de:	41 30       	cpi	r20, 0x01	; 1
 4e0:	51 f5       	brne	.+84     	; 0x536 <GPIO_init+0x10c>
		{
			DDRC |= (1 << pinNumber); // Output
 4e2:	44 b3       	in	r20, 0x14	; 20
 4e4:	21 e0       	ldi	r18, 0x01	; 1
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	b9 01       	movw	r22, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <GPIO_init+0xc6>
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <GPIO_init+0xc2>
 4f4:	cb 01       	movw	r24, r22
 4f6:	84 2b       	or	r24, r20
 4f8:	84 bb       	out	0x14, r24	; 20
 4fa:	08 95       	ret
		
		
		break;
		
		case PORT_D:
		if(direction == INPUT)
 4fc:	41 11       	cpse	r20, r1
 4fe:	0d c0       	rjmp	.+26     	; 0x51a <GPIO_init+0xf0>
		{
			DDRD &= (1 << pinNumber); // input
 500:	41 b3       	in	r20, 0x11	; 17
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	b9 01       	movw	r22, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <GPIO_init+0xe4>
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	8a 95       	dec	r24
 510:	e2 f7       	brpl	.-8      	; 0x50a <GPIO_init+0xe0>
 512:	cb 01       	movw	r24, r22
 514:	84 23       	and	r24, r20
 516:	81 bb       	out	0x11, r24	; 17
 518:	08 95       	ret
		}
		else if(direction == OUTPUT)
 51a:	41 30       	cpi	r20, 0x01	; 1
 51c:	61 f4       	brne	.+24     	; 0x536 <GPIO_init+0x10c>
		{
			DDRD |= (1 << pinNumber); // Output
 51e:	41 b3       	in	r20, 0x11	; 17
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	b9 01       	movw	r22, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <GPIO_init+0x102>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	8a 95       	dec	r24
 52e:	e2 f7       	brpl	.-8      	; 0x528 <GPIO_init+0xfe>
 530:	cb 01       	movw	r24, r22
 532:	84 2b       	or	r24, r20
 534:	81 bb       	out	0x11, r24	; 17
 536:	08 95       	ret

00000538 <GPIO_write>:
		
	}
}
void GPIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value) // Write data to GPIO
{
	switch(portNumber)
 538:	62 34       	cpi	r22, 0x42	; 66
 53a:	51 f1       	breq	.+84     	; 0x590 <GPIO_write+0x58>
 53c:	18 f4       	brcc	.+6      	; 0x544 <GPIO_write+0xc>
 53e:	61 34       	cpi	r22, 0x41	; 65
 540:	41 f0       	breq	.+16     	; 0x552 <GPIO_write+0x1a>
 542:	08 95       	ret
 544:	63 34       	cpi	r22, 0x43	; 67
 546:	09 f4       	brne	.+2      	; 0x54a <GPIO_write+0x12>
 548:	42 c0       	rjmp	.+132    	; 0x5ce <GPIO_write+0x96>
 54a:	64 34       	cpi	r22, 0x44	; 68
 54c:	09 f4       	brne	.+2      	; 0x550 <GPIO_write+0x18>
 54e:	5d c0       	rjmp	.+186    	; 0x60a <GPIO_write+0xd2>
 550:	08 95       	ret
	{
		case PORT_A:
		if(value == LOW)
 552:	41 11       	cpse	r20, r1
 554:	0d c0       	rjmp	.+26     	; 0x570 <GPIO_write+0x38>
		{
			PORTA &= (1 << pinNumber); // LOW
 556:	4b b3       	in	r20, 0x1b	; 27
 558:	21 e0       	ldi	r18, 0x01	; 1
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	b9 01       	movw	r22, r18
 55e:	02 c0       	rjmp	.+4      	; 0x564 <GPIO_write+0x2c>
 560:	66 0f       	add	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	8a 95       	dec	r24
 566:	e2 f7       	brpl	.-8      	; 0x560 <GPIO_write+0x28>
 568:	cb 01       	movw	r24, r22
 56a:	84 23       	and	r24, r20
 56c:	8b bb       	out	0x1b, r24	; 27
 56e:	08 95       	ret
		}
		else if(value == HIGH)
 570:	41 30       	cpi	r20, 0x01	; 1
 572:	09 f0       	breq	.+2      	; 0x576 <GPIO_write+0x3e>
 574:	67 c0       	rjmp	.+206    	; 0x644 <GPIO_write+0x10c>
		{
			PORTA |= (1 << pinNumber); // HIGH
 576:	4b b3       	in	r20, 0x1b	; 27
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	b9 01       	movw	r22, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <GPIO_write+0x4c>
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <GPIO_write+0x48>
 588:	cb 01       	movw	r24, r22
 58a:	84 2b       	or	r24, r20
 58c:	8b bb       	out	0x1b, r24	; 27
 58e:	08 95       	ret
			//Error handling
		}
		break;
		
		case PORT_B:
		if(value == LOW)
 590:	41 11       	cpse	r20, r1
 592:	0d c0       	rjmp	.+26     	; 0x5ae <GPIO_write+0x76>
		{
			PORTB &= (1 << pinNumber); // LOW
 594:	48 b3       	in	r20, 0x18	; 24
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	b9 01       	movw	r22, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <GPIO_write+0x6a>
 59e:	66 0f       	add	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <GPIO_write+0x66>
 5a6:	cb 01       	movw	r24, r22
 5a8:	84 23       	and	r24, r20
 5aa:	88 bb       	out	0x18, r24	; 24
 5ac:	08 95       	ret
		}
		else if(value == HIGH)
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <GPIO_write+0x7c>
 5b2:	48 c0       	rjmp	.+144    	; 0x644 <GPIO_write+0x10c>
		{
			PORTB |= (1 << pinNumber); // HIGH
 5b4:	48 b3       	in	r20, 0x18	; 24
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	b9 01       	movw	r22, r18
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <GPIO_write+0x8a>
 5be:	66 0f       	add	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	8a 95       	dec	r24
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <GPIO_write+0x86>
 5c6:	cb 01       	movw	r24, r22
 5c8:	84 2b       	or	r24, r20
 5ca:	88 bb       	out	0x18, r24	; 24
 5cc:	08 95       	ret
		
		
		break;
		
		case PORT_C:
		if(value == LOW)
 5ce:	41 11       	cpse	r20, r1
 5d0:	0d c0       	rjmp	.+26     	; 0x5ec <GPIO_write+0xb4>
		{
			PORTC &= (1 << pinNumber); // LOW
 5d2:	45 b3       	in	r20, 0x15	; 21
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	b9 01       	movw	r22, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <GPIO_write+0xa8>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	8a 95       	dec	r24
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <GPIO_write+0xa4>
 5e4:	cb 01       	movw	r24, r22
 5e6:	84 23       	and	r24, r20
 5e8:	85 bb       	out	0x15, r24	; 21
 5ea:	08 95       	ret
		}
		else if(value == HIGH)
 5ec:	41 30       	cpi	r20, 0x01	; 1
 5ee:	51 f5       	brne	.+84     	; 0x644 <GPIO_write+0x10c>
		{
			PORTC |= (1 << pinNumber); // HIGH
 5f0:	45 b3       	in	r20, 0x15	; 21
 5f2:	21 e0       	ldi	r18, 0x01	; 1
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	b9 01       	movw	r22, r18
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <GPIO_write+0xc6>
 5fa:	66 0f       	add	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	8a 95       	dec	r24
 600:	e2 f7       	brpl	.-8      	; 0x5fa <GPIO_write+0xc2>
 602:	cb 01       	movw	r24, r22
 604:	84 2b       	or	r24, r20
 606:	85 bb       	out	0x15, r24	; 21
 608:	08 95       	ret
		
		
		break;
		
		case PORT_D:
		if(value == LOW)
 60a:	41 11       	cpse	r20, r1
 60c:	0d c0       	rjmp	.+26     	; 0x628 <GPIO_write+0xf0>
		{
			PORTD &= (1 << pinNumber); // LOW
 60e:	42 b3       	in	r20, 0x12	; 18
 610:	21 e0       	ldi	r18, 0x01	; 1
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	b9 01       	movw	r22, r18
 616:	02 c0       	rjmp	.+4      	; 0x61c <GPIO_write+0xe4>
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	8a 95       	dec	r24
 61e:	e2 f7       	brpl	.-8      	; 0x618 <GPIO_write+0xe0>
 620:	cb 01       	movw	r24, r22
 622:	84 23       	and	r24, r20
 624:	82 bb       	out	0x12, r24	; 18
 626:	08 95       	ret
		}
		else if(value == HIGH)
 628:	41 30       	cpi	r20, 0x01	; 1
 62a:	61 f4       	brne	.+24     	; 0x644 <GPIO_write+0x10c>
		{
			PORTD |= (1 << pinNumber); // HIGH
 62c:	42 b3       	in	r20, 0x12	; 18
 62e:	21 e0       	ldi	r18, 0x01	; 1
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	b9 01       	movw	r22, r18
 634:	02 c0       	rjmp	.+4      	; 0x63a <GPIO_write+0x102>
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	8a 95       	dec	r24
 63c:	e2 f7       	brpl	.-8      	; 0x636 <GPIO_write+0xfe>
 63e:	cb 01       	movw	r24, r22
 640:	84 2b       	or	r24, r20
 642:	82 bb       	out	0x12, r24	; 18
 644:	08 95       	ret

00000646 <__vector_10>:
//call back pointer is assigned the address of the callback function which will be called in the app (higher layer generally)
  void (*CallBackPtr1) (void) = NULL;

//interrupt service routines to be called when interrupt flag is raised
ISR(TIMER0_COMP_vect)
{
 646:	1f 92       	push	r1
 648:	0f 92       	push	r0
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	0f 92       	push	r0
 64e:	11 24       	eor	r1, r1
 650:	2f 93       	push	r18
 652:	3f 93       	push	r19
 654:	4f 93       	push	r20
 656:	5f 93       	push	r21
 658:	6f 93       	push	r22
 65a:	7f 93       	push	r23
 65c:	8f 93       	push	r24
 65e:	9f 93       	push	r25
 660:	af 93       	push	r26
 662:	bf 93       	push	r27
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31
	if(CallBackPtr1 != NULL)
 668:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <CallBackPtr1>
 66c:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <CallBackPtr1+0x1>
 670:	30 97       	sbiw	r30, 0x00	; 0
 672:	09 f0       	breq	.+2      	; 0x676 <__vector_10+0x30>
	{
		CallBackPtr1();
 674:	09 95       	icall
	}
}
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	2f 93       	push	r18
 6a4:	3f 93       	push	r19
 6a6:	4f 93       	push	r20
 6a8:	5f 93       	push	r21
 6aa:	6f 93       	push	r22
 6ac:	7f 93       	push	r23
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
 6b2:	af 93       	push	r26
 6b4:	bf 93       	push	r27
 6b6:	ef 93       	push	r30
 6b8:	ff 93       	push	r31
	if(CallBackPtr1 != NULL)
 6ba:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <CallBackPtr1>
 6be:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <CallBackPtr1+0x1>
 6c2:	30 97       	sbiw	r30, 0x00	; 0
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <__vector_11+0x30>
	{
		CallBackPtr1();
 6c6:	09 95       	icall
	}
	
}
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	bf 91       	pop	r27
 6ce:	af 91       	pop	r26
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	7f 91       	pop	r23
 6d6:	6f 91       	pop	r22
 6d8:	5f 91       	pop	r21
 6da:	4f 91       	pop	r20
 6dc:	3f 91       	pop	r19
 6de:	2f 91       	pop	r18
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 6ea:	1f 92       	push	r1
 6ec:	0f 92       	push	r0
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	0f 92       	push	r0
 6f2:	11 24       	eor	r1, r1
 6f4:	2f 93       	push	r18
 6f6:	3f 93       	push	r19
 6f8:	4f 93       	push	r20
 6fa:	5f 93       	push	r21
 6fc:	6f 93       	push	r22
 6fe:	7f 93       	push	r23
 700:	8f 93       	push	r24
 702:	9f 93       	push	r25
 704:	af 93       	push	r26
 706:	bf 93       	push	r27
 708:	ef 93       	push	r30
 70a:	ff 93       	push	r31
	if(CallBackPtr1 != NULL)
 70c:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <CallBackPtr1>
 710:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <CallBackPtr1+0x1>
 714:	30 97       	sbiw	r30, 0x00	; 0
 716:	09 f0       	breq	.+2      	; 0x71a <__vector_7+0x30>
	{
		CallBackPtr1();
 718:	09 95       	icall
	}
}
 71a:	ff 91       	pop	r31
 71c:	ef 91       	pop	r30
 71e:	bf 91       	pop	r27
 720:	af 91       	pop	r26
 722:	9f 91       	pop	r25
 724:	8f 91       	pop	r24
 726:	7f 91       	pop	r23
 728:	6f 91       	pop	r22
 72a:	5f 91       	pop	r21
 72c:	4f 91       	pop	r20
 72e:	3f 91       	pop	r19
 730:	2f 91       	pop	r18
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <__vector_9>:
ISR(TIMER1_OVF_vect)
{
 73c:	1f 92       	push	r1
 73e:	0f 92       	push	r0
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	0f 92       	push	r0
 744:	11 24       	eor	r1, r1
 746:	2f 93       	push	r18
 748:	3f 93       	push	r19
 74a:	4f 93       	push	r20
 74c:	5f 93       	push	r21
 74e:	6f 93       	push	r22
 750:	7f 93       	push	r23
 752:	8f 93       	push	r24
 754:	9f 93       	push	r25
 756:	af 93       	push	r26
 758:	bf 93       	push	r27
 75a:	ef 93       	push	r30
 75c:	ff 93       	push	r31
	if(CallBackPtr1 != NULL)
 75e:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <CallBackPtr1>
 762:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <CallBackPtr1+0x1>
 766:	30 97       	sbiw	r30, 0x00	; 0
 768:	09 f0       	breq	.+2      	; 0x76c <__vector_9+0x30>
	{
		CallBackPtr1();
 76a:	09 95       	icall
	}
	
}
 76c:	ff 91       	pop	r31
 76e:	ef 91       	pop	r30
 770:	bf 91       	pop	r27
 772:	af 91       	pop	r26
 774:	9f 91       	pop	r25
 776:	8f 91       	pop	r24
 778:	7f 91       	pop	r23
 77a:	6f 91       	pop	r22
 77c:	5f 91       	pop	r21
 77e:	4f 91       	pop	r20
 780:	3f 91       	pop	r19
 782:	2f 91       	pop	r18
 784:	0f 90       	pop	r0
 786:	0f be       	out	0x3f, r0	; 63
 788:	0f 90       	pop	r0
 78a:	1f 90       	pop	r1
 78c:	18 95       	reti

0000078e <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 78e:	1f 92       	push	r1
 790:	0f 92       	push	r0
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	0f 92       	push	r0
 796:	11 24       	eor	r1, r1
 798:	2f 93       	push	r18
 79a:	3f 93       	push	r19
 79c:	4f 93       	push	r20
 79e:	5f 93       	push	r21
 7a0:	6f 93       	push	r22
 7a2:	7f 93       	push	r23
 7a4:	8f 93       	push	r24
 7a6:	9f 93       	push	r25
 7a8:	af 93       	push	r26
 7aa:	bf 93       	push	r27
 7ac:	ef 93       	push	r30
 7ae:	ff 93       	push	r31
	if(CallBackPtr1 != NULL)
 7b0:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <CallBackPtr1>
 7b4:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <CallBackPtr1+0x1>
 7b8:	30 97       	sbiw	r30, 0x00	; 0
 7ba:	09 f0       	breq	.+2      	; 0x7be <__vector_4+0x30>
	{
		CallBackPtr1();
 7bc:	09 95       	icall
	}
}
 7be:	ff 91       	pop	r31
 7c0:	ef 91       	pop	r30
 7c2:	bf 91       	pop	r27
 7c4:	af 91       	pop	r26
 7c6:	9f 91       	pop	r25
 7c8:	8f 91       	pop	r24
 7ca:	7f 91       	pop	r23
 7cc:	6f 91       	pop	r22
 7ce:	5f 91       	pop	r21
 7d0:	4f 91       	pop	r20
 7d2:	3f 91       	pop	r19
 7d4:	2f 91       	pop	r18
 7d6:	0f 90       	pop	r0
 7d8:	0f be       	out	0x3f, r0	; 63
 7da:	0f 90       	pop	r0
 7dc:	1f 90       	pop	r1
 7de:	18 95       	reti

000007e0 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
 7e0:	1f 92       	push	r1
 7e2:	0f 92       	push	r0
 7e4:	0f b6       	in	r0, 0x3f	; 63
 7e6:	0f 92       	push	r0
 7e8:	11 24       	eor	r1, r1
 7ea:	2f 93       	push	r18
 7ec:	3f 93       	push	r19
 7ee:	4f 93       	push	r20
 7f0:	5f 93       	push	r21
 7f2:	6f 93       	push	r22
 7f4:	7f 93       	push	r23
 7f6:	8f 93       	push	r24
 7f8:	9f 93       	push	r25
 7fa:	af 93       	push	r26
 7fc:	bf 93       	push	r27
 7fe:	ef 93       	push	r30
 800:	ff 93       	push	r31
	if(CallBackPtr1 != NULL)
 802:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <CallBackPtr1>
 806:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <CallBackPtr1+0x1>
 80a:	30 97       	sbiw	r30, 0x00	; 0
 80c:	09 f0       	breq	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	{
		CallBackPtr1();
 80e:	09 95       	icall
	}
	
}
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	7f 91       	pop	r23
 81e:	6f 91       	pop	r22
 820:	5f 91       	pop	r21
 822:	4f 91       	pop	r20
 824:	3f 91       	pop	r19
 826:	2f 91       	pop	r18
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	0f 90       	pop	r0
 82e:	1f 90       	pop	r1
 830:	18 95       	reti

00000832 <TIMER_setCallback>:
/************************************************************************/
/*	 functions implementations						                    */
/************************************************************************/
void TIMER_setCallback (void (*functionPtr) (void) )
{
	CallBackPtr1 =functionPtr;
 832:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <CallBackPtr1+0x1>
 836:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <CallBackPtr1>
 83a:	08 95       	ret

0000083c <TIMER_init>:
	
}

void TIMER_init(st_timerConfig_t * configStruct)
{
 83c:	fc 01       	movw	r30, r24
	switch(configStruct->selectedTimer)
 83e:	85 81       	ldd	r24, Z+5	; 0x05
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	29 f1       	breq	.+74     	; 0x88e <__stack+0x2f>
 844:	20 f0       	brcs	.+8      	; 0x84e <TIMER_init+0x12>
 846:	82 30       	cpi	r24, 0x02	; 2
 848:	09 f4       	brne	.+2      	; 0x84c <TIMER_init+0x10>
 84a:	4b c0       	rjmp	.+150    	; 0x8e2 <__stack+0x83>
 84c:	08 95       	ret
	{
		case timer0 :
		
		//initialize timer counter from the config struct entered by the user
		TCNT0 = configStruct->timerInitialValue;
 84e:	80 81       	ld	r24, Z
 850:	82 bf       	out	0x32, r24	; 50
		
		//set FOC0 to 1 since its non PWM mode always
		TCCR0 |= (1<<FOC0);
 852:	83 b7       	in	r24, 0x33	; 51
 854:	80 68       	ori	r24, 0x80	; 128
 856:	83 bf       	out	0x33, r24	; 51
		
		// WGM00 is always 0(for normal and CTC modes)
		//so  WGM01 if  1 timer is in CTC mode and if 0 normal mode
		if(configStruct->timerMode==CTC)
 858:	86 81       	ldd	r24, Z+6	; 0x06
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	49 f4       	brne	.+18     	; 0x870 <__stack+0x11>
		{
			//also we need to put compare value in OCR0 if mode is CTC
			OCR0 = configStruct->comparelValue;
 85e:	82 81       	ldd	r24, Z+2	; 0x02
 860:	8c bf       	out	0x3c, r24	; 60
			//set WGM01 For CTC mode
			TCCR0 |= (1<<WGM01);
 862:	83 b7       	in	r24, 0x33	; 51
 864:	88 60       	ori	r24, 0x08	; 8
 866:	83 bf       	out	0x33, r24	; 51
			//Enable interrupt on compare match of timer0
			TIMSK |=(1<<OCIE0);
 868:	89 b7       	in	r24, 0x39	; 57
 86a:	82 60       	ori	r24, 0x02	; 2
 86c:	89 bf       	out	0x39, r24	; 57
 86e:	08 c0       	rjmp	.+16     	; 0x880 <__stack+0x21>
		}
		else if(configStruct->timerMode==normal)
 870:	81 11       	cpse	r24, r1
 872:	06 c0       	rjmp	.+12     	; 0x880 <__stack+0x21>
		{
			TCCR0 &=~ (1<<WGM01); //set bit WGM01 to zero
 874:	83 b7       	in	r24, 0x33	; 51
 876:	87 7f       	andi	r24, 0xF7	; 247
 878:	83 bf       	out	0x33, r24	; 51
			//Enable interrupt on overflow of timer0
			TIMSK |=(1<<TOIE0);
 87a:	89 b7       	in	r24, 0x39	; 57
 87c:	81 60       	ori	r24, 0x01	; 1
 87e:	89 bf       	out	0x39, r24	; 57
		// that the other bits of the TCCR0 register stay the same and we 0 the bits that we want
		// to add the prescaler value to ,,, then we do the same with the prescaler value from the
		//config struct to make sure no more than the first 3 bits is taken from the user...
		// and finally the prescaler value is put into the TCCR0 register by the Or operation as shown
		
		TCCR0 = (TCCR0 & 0xF8) | ( (configStruct->prescaler) & 0x07 );
 880:	93 b7       	in	r25, 0x33	; 51
 882:	84 81       	ldd	r24, Z+4	; 0x04
 884:	98 7f       	andi	r25, 0xF8	; 248
 886:	87 70       	andi	r24, 0x07	; 7
 888:	89 2b       	or	r24, r25
 88a:	83 bf       	out	0x33, r24	; 51


		break;
 88c:	08 95       	ret
		
		case timer1 :
		//initialize timer counter from the config struct entered by the user
		TCNT1 = configStruct->timerInitialValue;
 88e:	80 81       	ld	r24, Z
 890:	91 81       	ldd	r25, Z+1	; 0x01
 892:	9d bd       	out	0x2d, r25	; 45
 894:	8c bd       	out	0x2c, r24	; 44
		
		//set FOC1A and FOC1B to 1 since its non PWM mode always
		TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
 896:	8f b5       	in	r24, 0x2f	; 47
 898:	8c 60       	ori	r24, 0x0C	; 12
 89a:	8f bd       	out	0x2f, r24	; 47
		
		
		// WGM00 is always 0 (for normal and CTC modes)
		//so  WGM12 if  1 timer is in CTC mode and if 0 normal mode
		if(configStruct->timerMode==CTC)
 89c:	86 81       	ldd	r24, Z+6	; 0x06
 89e:	81 30       	cpi	r24, 0x01	; 1
 8a0:	71 f4       	brne	.+28     	; 0x8be <__stack+0x5f>
		{
			//also we need to put compare value in OCR1A if mode is CTC
			OCR1A = configStruct->comparelValue;
 8a2:	82 81       	ldd	r24, Z+2	; 0x02
 8a4:	93 81       	ldd	r25, Z+3	; 0x03
 8a6:	9b bd       	out	0x2b, r25	; 43
 8a8:	8a bd       	out	0x2a, r24	; 42
			//set WGM12 For CTC mode
			TCCR1B |= (1<<WGM12);
 8aa:	8e b5       	in	r24, 0x2e	; 46
 8ac:	88 60       	ori	r24, 0x08	; 8
 8ae:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &=~ (1<<WGM13); //set bit WGM13 to zero
 8b0:	8e b5       	in	r24, 0x2e	; 46
 8b2:	8f 7e       	andi	r24, 0xEF	; 239
 8b4:	8e bd       	out	0x2e, r24	; 46

			//Enable interrupt on compare match of timer1
			TIMSK |=(1<<OCIE1A);
 8b6:	89 b7       	in	r24, 0x39	; 57
 8b8:	80 61       	ori	r24, 0x10	; 16
 8ba:	89 bf       	out	0x39, r24	; 57
 8bc:	0b c0       	rjmp	.+22     	; 0x8d4 <__stack+0x75>
		}
		else if(configStruct->timerMode==normal)
 8be:	81 11       	cpse	r24, r1
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <__stack+0x75>
		{
			//set WGM12 For NORMAL mode
			TCCR1B &=~ (1<<WGM12);//set bit WGM12 to zero
 8c2:	8e b5       	in	r24, 0x2e	; 46
 8c4:	87 7f       	andi	r24, 0xF7	; 247
 8c6:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &=~ (1<<WGM13); //set bit WGM13 to zero
 8c8:	8e b5       	in	r24, 0x2e	; 46
 8ca:	8f 7e       	andi	r24, 0xEF	; 239
 8cc:	8e bd       	out	0x2e, r24	; 46
			//Enable interrupt on overflow of timer0
			TIMSK |=(1<<TOIE1);
 8ce:	89 b7       	in	r24, 0x39	; 57
 8d0:	84 60       	ori	r24, 0x04	; 4
 8d2:	89 bf       	out	0x39, r24	; 57
		// that the other bits of the TCCR0 register stay the same and we 0 the bits that we want
		// to add the prescaler value to ,,, then we do the same with the prescaler value from the
		//config struct to make sure no more than the first 3 bits is taken from the user...
		// and finally the prescaler value is put into the TCCR0 register by the Or operation as shown
		
		TCCR1B = (TCCR1B & 0xF8) | ( (configStruct->prescaler) & 0x07 );
 8d4:	9e b5       	in	r25, 0x2e	; 46
 8d6:	84 81       	ldd	r24, Z+4	; 0x04
 8d8:	98 7f       	andi	r25, 0xF8	; 248
 8da:	87 70       	andi	r24, 0x07	; 7
 8dc:	89 2b       	or	r24, r25
 8de:	8e bd       	out	0x2e, r24	; 46
		
		
		
		
		
		break;
 8e0:	08 95       	ret
		
		case timer2 :
		
		//initialize timer counter from the config struct entered by the user
		TCNT2 = configStruct->timerInitialValue;
 8e2:	80 81       	ld	r24, Z
 8e4:	84 bd       	out	0x24, r24	; 36
		
		//set FOC2 to 1 since its non PWM mode always
		TCCR2 |= (1<<FOC2);
 8e6:	85 b5       	in	r24, 0x25	; 37
 8e8:	80 68       	ori	r24, 0x80	; 128
 8ea:	85 bd       	out	0x25, r24	; 37
		
		// WGM20 is always 0 (for normal and CTC modes)
		//so  WGM21 if  1 timer is in CTC mode and if 0 normal mode
		if(configStruct->timerMode==CTC)
 8ec:	86 81       	ldd	r24, Z+6	; 0x06
 8ee:	81 30       	cpi	r24, 0x01	; 1
 8f0:	49 f4       	brne	.+18     	; 0x904 <__stack+0xa5>
		{
			//also we need to put compare value in OCR2 if mode is CTC
			OCR2 = configStruct->comparelValue;
 8f2:	82 81       	ldd	r24, Z+2	; 0x02
 8f4:	83 bd       	out	0x23, r24	; 35
			//set WGM21 For CTC mode
			TCCR2 |= (1<<WGM21);
 8f6:	85 b5       	in	r24, 0x25	; 37
 8f8:	88 60       	ori	r24, 0x08	; 8
 8fa:	85 bd       	out	0x25, r24	; 37
			//Enable interrupt on compare match of timer0
			TIMSK |=(1<<OCIE2);
 8fc:	89 b7       	in	r24, 0x39	; 57
 8fe:	80 68       	ori	r24, 0x80	; 128
 900:	89 bf       	out	0x39, r24	; 57
 902:	08 c0       	rjmp	.+16     	; 0x914 <__stack+0xb5>
		}
		else if(configStruct->timerMode==normal)
 904:	81 11       	cpse	r24, r1
 906:	06 c0       	rjmp	.+12     	; 0x914 <__stack+0xb5>
		{
			TCCR0 &=~ (1<<WGM21); //set bit WGM21 to zero
 908:	83 b7       	in	r24, 0x33	; 51
 90a:	87 7f       	andi	r24, 0xF7	; 247
 90c:	83 bf       	out	0x33, r24	; 51
			//Enable interrupt on overflow of timer2
			TIMSK |=(1<<TOIE2);
 90e:	89 b7       	in	r24, 0x39	; 57
 910:	80 64       	ori	r24, 0x40	; 64
 912:	89 bf       	out	0x39, r24	; 57
		// that the other bits of the TCCR0 register stay the same and we 0 the bits that we want
		// to add the prescaler value to ,,, then we do the same with the prescaler value from the
		//config struct to make sure no more than the first 3 bits is taken from the user...
		// and finally the prescaler value is put into the TCCR0 register by the Or operation as shown
		
		TCCR2 = (TCCR2 & 0xF8) | ( (configStruct->prescaler) & 0x07 );
 914:	95 b5       	in	r25, 0x25	; 37
 916:	84 81       	ldd	r24, Z+4	; 0x04
 918:	98 7f       	andi	r25, 0xF8	; 248
 91a:	87 70       	andi	r24, 0x07	; 7
 91c:	89 2b       	or	r24, r25
 91e:	85 bd       	out	0x25, r24	; 37
 920:	08 95       	ret

00000922 <TIMER_reset>:
		
	}
}
void TIMER_reset(en_timer_t selectedTimer)
{
	switch(selectedTimer)
 922:	81 30       	cpi	r24, 0x01	; 1
 924:	51 f0       	breq	.+20     	; 0x93a <TIMER_reset+0x18>
 926:	18 f0       	brcs	.+6      	; 0x92e <TIMER_reset+0xc>
 928:	82 30       	cpi	r24, 0x02	; 2
 92a:	79 f0       	breq	.+30     	; 0x94a <TIMER_reset+0x28>
 92c:	08 95       	ret
	{
		case timer0 :
		TCCR0=0x00; //reseting the control register will reset everything and stop the timer
 92e:	13 be       	out	0x33, r1	; 51
		//since the prescaler bits will have 0
		
		// reset the compare register
		OCR0 =0x00 ;
 930:	1c be       	out	0x3c, r1	; 60
		
		//disable interrupt on CTC and overflow of timer0
		TIMSK &=~(1<<TOIE0) &~(1<<OCIE0);
 932:	89 b7       	in	r24, 0x39	; 57
 934:	8c 7f       	andi	r24, 0xFC	; 252
 936:	89 bf       	out	0x39, r24	; 57
		
		break;
 938:	08 95       	ret
		
		case timer1 :
		
		TCCR1A=0x00;
 93a:	1f bc       	out	0x2f, r1	; 47
		TCCR1B=0x00;
 93c:	1e bc       	out	0x2e, r1	; 46
		
		// reset the compare register
		OCR1A = 0x00;
 93e:	1b bc       	out	0x2b, r1	; 43
 940:	1a bc       	out	0x2a, r1	; 42
		
		//disable interrupt on Compare out A and overflow of timer1
		TIMSK &=~(1<<OCIE1A) &~(1<<TOIE1);
 942:	89 b7       	in	r24, 0x39	; 57
 944:	8b 7e       	andi	r24, 0xEB	; 235
 946:	89 bf       	out	0x39, r24	; 57
		break;
 948:	08 95       	ret
		
		case timer2 :
		TCCR2=0x00; //reseting the control register will reset everything and stop the timer
 94a:	15 bc       	out	0x25, r1	; 37
		//since the prescaler bits will have 0
		
		// reset the compare register
		OCR2 =0x00 ;
 94c:	13 bc       	out	0x23, r1	; 35
		
		//disable interrupt on CTC and overflow of timer2
		TIMSK &=~(1<<TOIE2) &~(1<<OCIE2);
 94e:	89 b7       	in	r24, 0x39	; 57
 950:	8f 73       	andi	r24, 0x3F	; 63
 952:	89 bf       	out	0x39, r24	; 57
 954:	08 95       	ret

00000956 <_exit>:
 956:	f8 94       	cli

00000958 <__stop_program>:
 958:	ff cf       	rjmp	.-2      	; 0x958 <__stop_program>
